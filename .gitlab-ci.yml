# Definição da versão do docker-compose
stages:
  - build # Estágio para construir o container da aplicação
  - test # Estágio de testes
  - lint # Estágio de análise estática do código
  - deploy # Estágio de deploy

# Define a imagem Docker que será usada nos jobs do CI
image: lappis/decidim-govbr:v1-release
services:
  - postgres:13.2-alpine # Serviço do Postgres
  - redis:6.0.12-alpine # Serviço do Redis

# Variáveis de ambiente globais utilizadas em todos os jobs
variables:
  POSTGRES_DB: myapp_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  RAILS_ENV: test
  REDIS_URL: redis://localhost:6379
  REDIS_CACHE_URL: redis://localhost:6380

# Job para construir a imagem Docker da aplicação
Build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Iniciando build."
    - docker build -t myapp:1.0 .
    - echo "Sucesso de build"


# Job para executar testes unitários 
Testing:
  stage: test
  services:
    - name: postgres:13.2-alpine
      alias: postgres
    - redis:6.0.12-alpine
  variables:
    POSTGRES_HOST: postgres 
    DATABASE_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST/$POSTGRES_DB"
  script:
    - echo "Iniciando testes."
    - bundle install
    - bundle exec rails db:create RAILS_ENV=$RAILS_ENV || true # Cria banco de dados se não existir
    - bundle exec rails db:migrate RAILS_ENV=$RAILS_ENV
    # - yarn install 
    - bundle exec rails test && bundle exec rspec # Executa testes do Rails e RSpec
    - echo "Finalizando."

# Job para análise estática do código com Rubocop, ignorando determinadas regras
Lint:
  stage: lint
  script:
    - bundle install
    - bundle exec rubocop --except Style/ClassAndModuleChildren,Style/FrozenStringLiteralComment,Layout/TrailingEmptyLines,Layout/LineLength,Style/StringLiterals,Metrics/BlockLength,Layout/SpaceInsideHashLiteralBraces,Style/TrailingCommaInArguments,Style/WordArray,Metrics/ClassLength,Style/BlockComments,Style/HashSyntax,Lint/ConstantDefinitionInBlock,Layout/EmptyLinesAroundBlockBody,Metrics/ModuleLength,Layout/LeadingCommentSpace,Style/RescueModifier,Lint/ScriptPermission,Style/SymbolProc,Style/RescueStandardError,Style/RedundantBegin,Style/StringConcatenation,Style/Documentation,Lint/UselessAssignment,Metrics/AbcSize,Lint/MissingSuper,Metrics/MethodLength,Metrics/ParameterLists,Style/PercentLiteralDelimiters,Style/SymbolArray,Layout/SpaceAfterComma,Layout/ArgumentAlignment,Style/IfUnlessModifier,Layout/TrailingWhitespace,Lint/RaiseException,Layout/HeredocIndentation,Naming/AccessorMethodName,Style/RedundantSelf,Lint/UnusedBlockArgument,Style/BlockDelimiters,Metrics/PerceivedComplexity,Metrics/CyclomaticComplexity,Layout/SpaceBeforeBlockBraces,Layout/SpaceInLambdaLiteral,Style/Lambda,Layout/FirstArgumentIndentation,Layout/SpaceInsideParens,Style/GuardClause,Layout/MultilineOperationIndentation,Layout/FirstHashElementIndentation,Style/UnlessElse,Layout/EmptyLineAfterGuardClause,Layout/MultilineMethodCallBraceLayout,Style/ConditionalAssignment,Bundler/OrderedGems,Layout/EmptyLinesAroundExceptionHandlingKeywords,Layout/SpaceAroundOperators,Style/NumericLiterals


# Job para deploy
deploy:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Iniciando Deploy."
    - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" $DOCKER_REGISTRY
    - docker build -t $DOCKER_REGISTRY_USER/myapp:1.0 .
    - docker push $DOCKER_REGISTRY_USER/myapp:1.0
    - echo "Deploy realizado com sucesso."
  only:
    - main # Executar este job apenas no branch principal 






